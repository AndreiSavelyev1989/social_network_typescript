{"version":3,"sources":["components/common/universal-input/UniversalInput.tsx","components/common/universal-input/UniversalInput.module.scss","components/login/login-form/LoginForm.module.scss","components/common/universal-checkbox/UniversalCheckbox.module.scss","components/common/universal-checkbox/UniversalCheckbox.tsx","components/login/login-form/LoginForm.tsx","components/login/Login.tsx","components/login/LoginContainer.tsx"],"names":["UniversalInput","id","type","placeholder","formikFieldProps","className","styles","loginInput","formInput","required","module","exports","UniversalCheckbox","title","wrapper","box","name","htmlFor","LoginForm","React","memo","dispatch","error","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","loginTC","style","formBlock","handleSubmit","descriptionBlock","emailTitle","getFieldProps","touched","registrationError","passwordBlock","passwordTitle","forgotPasswordTitle","confirmBlock","button","UniversalButton","Login","isAuth","to","loginContainer","loginBlock","animationContainer","circleSmall","circleMedium","circleLarge","circleXLarge","circleXXLarge","LoginContainer","useDispatch","useSelector","state","auth"],"mappings":"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","file":"static/js/7.e9a3bc5b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./UniversalInput.module.scss\";\r\n\r\ntype PropsType = {\r\n    id?: string\r\n    type: string\r\n    placeholder: string\r\n    formikFieldProps: any\r\n    className?: \"login\"\r\n}\r\n\r\nexport const UniversalInput: React.FC<PropsType> = ({id, type, placeholder, formikFieldProps, className}) => {\r\n    return (\r\n            <input\r\n                id={id}\r\n                className={className === \"login\" ? styles.loginInput : styles.formInput}\r\n                type={type}\r\n                placeholder={placeholder}\r\n                required\r\n                {...formikFieldProps}\r\n            />\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"UniversalInput_formInput__E3x54\",\"loginInput\":\"UniversalInput_loginInput__2pjhI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBlock\":\"LoginForm_formBlock__2fI46\",\"descriptionBlock\":\"LoginForm_descriptionBlock__3209N\",\"emailTitle\":\"LoginForm_emailTitle__378ZM\",\"passwordBlock\":\"LoginForm_passwordBlock__1AFJK\",\"passwordTitle\":\"LoginForm_passwordTitle__1wgXB\",\"forgotPasswordTitle\":\"LoginForm_forgotPasswordTitle__2Wmuw\",\"confirmBlock\":\"LoginForm_confirmBlock__i6leB\",\"button\":\"LoginForm_button__3JYjJ\",\"registrationError\":\"LoginForm_registrationError__Q15Ok\",\"error\":\"LoginForm_error__3IBFZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UniversalCheckbox_wrapper__1Zhv4\",\"box\":\"UniversalCheckbox_box__3jmeb\",\"anim\":\"UniversalCheckbox_anim__2U_w4\"};","import React from \"react\";\r\nimport styles from \"./UniversalCheckbox.module.scss\"\r\n\r\ntype PropsType = {\r\n    title: string\r\n}\r\n\r\nexport const UniversalCheckbox: React.FC<PropsType>= ({title}) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.box}>\r\n                <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\"/>\r\n                <label htmlFor=\"checkbox\">\r\n                    <div><i className=\"fas fa-check\"> </i></div>\r\n                    {title}</label>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import style from \"./LoginForm.module.scss\";\r\nimport React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginTC} from \"../../../redux-state/auth-reducer\";\r\nimport {UniversalInput} from \"../../common/universal-input/UniversalInput\";\r\nimport {UniversalCheckbox} from \"../../common/universal-checkbox/UniversalCheckbox\";\r\nimport {UniversalButton} from \"../../common/universal-button/UniversalButton\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    dispatch: Dispatch<any>\r\n    error: string\r\n}\r\n\r\nexport const LoginForm: React.FC<PropsType> = React.memo(({dispatch, error}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be 8 characters or more ';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values.email, values.password, values.rememberMe))\r\n        },\r\n    })\r\n    return (\r\n        <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n            <div className={style.descriptionBlock}>\r\n                <p>Enter your email address and password to access admin panel.</p>\r\n            </div>\r\n            <label htmlFor={\"inputEmail\"} className={style.emailTitle}>\r\n                Email address\r\n            </label>\r\n            <UniversalInput\r\n                id={\"inputEmail\"}\r\n                type={\"text\"}\r\n                placeholder={\"Email\"}\r\n                className={\"login\"}\r\n                formikFieldProps={formik.getFieldProps(\"email\")}/>\r\n            {formik.touched.email && formik.errors.email ?\r\n                <div className={style.registrationError}>{formik.errors.email}</div> : null}\r\n            <div className={style.passwordBlock}>\r\n                <label htmlFor={\"inputPassword\"} className={style.passwordTitle}>\r\n                    Password\r\n                </label>\r\n                <div className={style.forgotPasswordTitle}>\r\n                    Forgot password?\r\n                </div>\r\n            </div>\r\n\r\n            <UniversalInput\r\n                id={\"inputPassword\"}\r\n                type={\"password\"}\r\n                placeholder={\"Password\"}\r\n                className={\"login\"}\r\n                formikFieldProps={formik.getFieldProps(\"password\")}/>\r\n            {formik.touched.password && formik.errors.password ?\r\n                <div className={style.registrationError}>{formik.errors.password}</div> : null}\r\n\r\n            <div className={style.confirmBlock}>\r\n                <UniversalCheckbox title={\"Remember me\"}/>\r\n                <div className={style.button}>\r\n                    <UniversalButton title={\"Log in\"}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={style.error}>{error ? error : null}</div>\r\n\r\n        </form>\r\n    )\r\n})","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"./Login.module.scss\"\r\nimport {LoginForm} from \"./login-form/LoginForm\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype PropsType = {\r\n    dispatch: Dispatch<any>\r\n    error: string\r\n    isAuth: boolean\r\n}\r\nexport const Login: React.FC<PropsType> = React.memo(({dispatch, error, isAuth}) => {\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <>\r\n            <div className={style.loginContainer}>\r\n                <div className={style.loginBlock}>\r\n                    <h1 className={style.title}>Log in </h1>\r\n                    <LoginForm dispatch={dispatch} error={error}/>\r\n                </div>\r\n                <div className={style.animationContainer}>\r\n                    <div className={style.circleSmall}></div>\r\n                    <div className={style.circleMedium}></div>\r\n                    <div className={style.circleLarge}></div>\r\n                    <div className={style.circleXLarge}></div>\r\n                    <div className={style.circleXXLarge}></div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n})","import {Login} from \"./Login\";\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreType} from \"../../redux-state/redux-store\";\r\nimport {AuthUserType} from \"../../redux-state/auth-reducer\";\r\n\r\nconst LoginContainer = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {error, isAuth} = useSelector<StoreType, AuthUserType>(state => state.auth);\r\n\r\n    return (\r\n        <Login dispatch={dispatch} error={error} isAuth={isAuth}/>\r\n    )\r\n})\r\n\r\nexport default LoginContainer;"],"sourceRoot":""}