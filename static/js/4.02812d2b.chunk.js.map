{"version":3,"sources":["components/common/universal-input/UniversalInput.tsx","components/common/universal-input/UniversalInput.module.scss","components/profile/profile-info/about-me/About.module.scss","components/common/delete-button/DeleteButton.tsx","components/common/delete-button/DeleteButton.module.scss","components/common/modal/modal-confirm/ConfirmModal.tsx","components/common/modal/modal-confirm/ConfirmModal.module.scss","components/common/universal-checkbox/UniversalCheckbox.tsx","components/common/universal-checkbox/UniversalCheckbox.module.scss","components/hoc/withAuthRedirect.tsx","components/profile/Profile.module.scss","components/profile/profile-info/ProfileInfo.module.scss","components/profile/profile-info/profile-status/ProfileStatusWithHooks.module.scss","components/profile/my-posts/MyPosts.module.scss","components/profile/my-posts/post/Post.module.scss","components/profile/profile-post-form/ProfilePostForm.module.scss","components/profile/profile-navigation/ProfileNavigation.module.scss","components/profile/profile-info/my-friends/MyFriends.module.scss","components/profile/profile-info/profile-status/ProfileStatusWithHooks.tsx","components/profile/profile-info/upload-button/UploadButton.tsx","images/profileBackground.jpg","components/profile/profile-info/ProfileInfo.tsx","components/profile/my-posts/post/Post.tsx","components/profile/profile-post-form/ProfilePostForm.tsx","components/profile/my-posts/MyPosts.tsx","components/profile/my-posts/MyPostsContainer.tsx","components/profile/profile-navigation/ProfileNavigation.tsx","components/profile/profile-info/about-me/about-item/AboutItem.tsx","components/profile/profile-info/about-me/user-contacts/contact/Contact.tsx","components/profile/profile-info/about-me/user-contacts/UserContactsForm.tsx","components/profile/profile-info/about-me/user-contacts/UserContacts.tsx","components/profile/profile-info/about-me/About.tsx","components/profile/profile-info/my-friends/MyFriends.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx"],"names":["UniversalInput","id","type","placeholder","formikFieldProps","className","value","onChange","autoFocus","onBlur","onKeyUp","styles","loginInput","formInput","statusInput","required","module","exports","DeleteButton","onDeleteHandler","disabled","deleteBlock","deleteButton","onClick","icon","ConfirmModal","confirm","title","confirmCallback","cancelCallback","modalContainer","noModal","text","confirmBlock","callback","UniversalCheckbox","inputValue","wrapper","box","name","checked","htmlFor","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","ProfileStatusWithHooks","React","memo","status","changeUserStatus","isOwner","useState","editMode","setEditMode","localStatus","setLocalStatus","useEffect","statusContainer","e","currentTarget","key","statusBlock","Preloader","statusDescription","noDesc","useStyles","makeStyles","theme","createStyles","root","margin","spacing","input","display","UploadButton","changeUserPhoto","classes","accept","target","files","IconButton","color","aria-label","component","size","style","fontSize","ProfileInfo","profile","contentContainer","backgroundImage","profileBackgroundImg","contentBlock","imageContainer","src","photos","large","userAvatar","alt","fileContainer","userNameTitle","fullName","Post","likesCount","setLikesCount","postMessage","deletePost","dislikesCount","setDislikesCount","postBackground","authUserId","setConfirm","today","Date","date","getDate","getMonth","getFullYear","postContainer","titleBlock","avatarBlock","avatar","userNameDateBlock","userName","userId","imageBlock","likesBlock","likeDislikeContainer","like","dislike","ProfilePostForm","addPost","formik","useFormik","initialValues","newPost","validate","values","errors","length","onSubmit","resetForm","postsContainer","postsTitle","formBlock","handleSubmit","formBlockEnterText","userPhoto","getFieldProps","formBlockSubmit","touched","error","UniversalButton","MyPosts","posts","postElements","reverse","map","p","v1","MyPostsContainer","profilePage","ProfileNavigation","profNavContainer","profileNavData","item","index","PATH","PROFILE","path","activeClassName","profNavActive","profNavItem","profNavTitle","AboutItem","data","classname","Contact","contactTitle","contactValue","contactBlock","UserContactsForm","setUserProfileEditMode","changeUserProfile","aboutMe","lookingForAJob","lookingForAJobDescription","contacts","facebook","github","instagram","mainLink","twitter","vk","website","youtube","small","aboutBlock","basicInfoBlock","nameBlock","aboutMeBlock","lookingJobEditModeBlock","jobDescBlock","linksInfoBlock","Object","keys","UserContacts","profileEditMode","lookingJobBlock","About","aboutContainer","MyFriends","aboutMyFriendContainer","Profile","paramsUserId","profileWrapper","profileNavPanel","ABOUT","render","FRIENDS","POSTS","ProfileContainer","Number","this","match","params","history","push","requestUserProfile","requestUserStatus","refreshProfile","prevProps","prevState","PureComponent","compose","withRouter"],"mappings":"qNAgBaA,EAAsC,SAAC,GAWO,IAVHC,EAUE,EAVFA,GACAC,EASE,EATFA,KACAC,EAQE,EARFA,YACAC,EAOE,EAPFA,iBACAC,EAME,EANFA,UACAC,EAKE,EALFA,MACAC,EAIE,EAJFA,SACAC,EAGE,EAHFA,UACAC,EAEE,EAFFA,OACAC,EACE,EADFA,QAEpD,OACQ,mCACIT,GAAIA,EACJI,UAAyB,UAAdA,EAAwBM,IAAOC,WAAaD,IAAOE,WAC1C,WAAdR,EAAyBM,IAAOG,YAAiCH,IAAOE,UAC9EX,KAAMA,EACNC,YAAaA,EACbY,UAAQ,EACRP,UAAWA,EACXD,SAAUA,EACVE,OAAQA,EACRC,QAASA,EACTJ,MAAOA,GACHF,M,oBCxCpBY,EAAOC,QAAU,CAAC,UAAY,kCAAkC,WAAa,mCAAmC,YAAc,sC,oBCA9HD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,WAAa,0BAA0B,eAAiB,8BAA8B,UAAY,yBAAyB,aAAe,4BAA4B,gBAAkB,+BAA+B,wBAA0B,uCAAuC,aAAe,4BAA4B,eAAiB,8BAA8B,aAAe,8B,iCCDlc,8EASaC,EAAoC,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,SAChE,OACI,qBAAKf,UAAWM,IAAOU,YAAvB,SACI,qBAAKhB,UAAWM,IAAOW,aAAvB,SACI,wBAAQF,SAAUA,EAAUG,QAASJ,EAArC,SACI,cAAC,IAAD,CAAUd,UAAWM,IAAOa,e,oBCbhDR,EAAOC,QAAU,CAAC,YAAc,kCAAkC,aAAe,mCAAmC,KAAO,6B,iCCD3H,4EAaaQ,EAAoC,SAAC,GAKO,IAJHC,EAIE,EAJFA,QACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,gBACAC,EACE,EADFA,eAGlD,OACI,sBAAKxB,UAAWqB,EAAUf,IAAOmB,eAAiBnB,IAAOoB,QAAzD,UACI,qBAAK1B,UAAWM,IAAOqB,KAAvB,SAA8BL,IAC9B,sBAAKtB,UAAWM,IAAOsB,aAAvB,UACI,cAAC,IAAD,CAAiBC,SAAUN,EAAiBD,MAAO,OACnD,cAAC,IAAD,CAAiBO,SAAUL,EAAgBF,MAAO,SAAUtB,WAAW,Y,oBCxBvFW,EAAOC,QAAU,CAAC,eAAiB,qCAAqC,KAAO,2BAA2B,aAAe,mCAAmC,QAAU,gC,8GCQzJkB,EAAwC,SAAC,GAA2C,IAA1CR,EAAyC,EAAzCA,MAAOS,EAAkC,EAAlCA,WAAYhC,EAAsB,EAAtBA,iBACtE,OACI,qBAAKC,UAAWM,IAAO0B,QAAvB,SACI,sBAAKhC,UAAWM,IAAO2B,IAAvB,UACI,mCAAOpC,KAAK,WAAWD,GAAG,WAAWsC,KAAK,WAAWC,QAASJ,GAAgBhC,IAC9E,wBAAOqC,QAAQ,WAAf,UACI,8BAAK,mBAAGpC,UAAU,eAAb,iBACJsB,Y,oBCfrBX,EAAOC,QAAU,CAAC,QAAU,mCAAmC,IAAM,+BAA+B,KAAO,kC,2GCIrGyB,EAAkB,SAACC,GAAD,MAAuB,CAC3CC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAK7B,OAAOC,YAAQN,EAARM,EAJc,SAACC,GAClB,OAAKA,EAAML,OACJ,cAACG,EAAD,eAAeE,IADI,cAAC,IAAD,CAAUC,GAAG,gB,oBCV/ClC,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,gBAAkB,mC,oBCArFD,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,aAAe,kCAAkC,eAAiB,oCAAoC,cAAgB,mCAAmC,cAAgB,qC,oBCApPD,EAAOC,QAAU,CAAC,gBAAkB,gDAAgD,YAAc,4CAA4C,kBAAoB,kDAAkD,WAAa,2CAA2C,OAAS,uCAAuC,OAAS,yC,oBCArUD,EAAOC,QAAU,CAAC,eAAiB,kC,oBCAnCD,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,WAAa,yBAAyB,YAAc,0BAA0B,OAAS,qBAAqB,kBAAoB,gCAAgC,SAAW,uBAAuB,YAAc,0BAA0B,WAAa,yBAAyB,WAAa,yBAAyB,qBAAuB,mCAAmC,KAAO,mBAAmB,QAAU,wB,oBCAldD,EAAOC,QAAU,CAAC,eAAiB,wCAAwC,WAAa,oCAAoC,UAAY,mCAAmC,mBAAqB,4CAA4C,UAAY,mCAAmC,gBAAkB,yCAAyC,MAAQ,iC,oBCA9VD,EAAOC,QAAU,CAAC,iBAAmB,4CAA4C,YAAc,uCAAuC,aAAe,wCAAwC,cAAgB,2C,oBCA7MD,EAAOC,QAAU,CAAC,uBAAyB,4C,iNCU9BkC,EAA8CC,IAAMC,MAAK,YAA0C,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,iBAAkBC,EAAa,EAAbA,QAC9F,EAAgCJ,IAAMK,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCP,IAAMK,SAASH,GAArD,mBAAOM,EAAP,KAAoBC,EAApB,KAEAT,IAAMU,WAAU,WACZD,EAAeP,KAChB,CAACA,IAqBJ,OACI,mCACI,qBAAKjD,UAAWM,IAAOoD,gBAAvB,SACKL,GAAYF,EACP,cAACxD,EAAA,EAAD,CACEE,KAAK,OACLG,UAAW,SACXG,WAAW,EACXD,SAlBU,SAACyD,GAC3BH,EAAeG,EAAEC,cAAc3D,QAkBfG,OAxBO,WACvBkD,GAAY,GACZJ,EAAiBK,IAuBDlD,QAhBY,SAACsD,GACf,UAAVA,EAAEE,MACFP,GAAY,GACZJ,EAAiBK,KAcLtD,MAAOsD,IAEX,sBAAKvD,UAAWM,IAAOwD,YAAvB,UACI,sBAAM9D,UAAWM,IAAO2C,OAClB/B,QAlCD,WACrBoC,GAAY,IAgCI,SAEKL,IAAWM,EACNN,GAAU,eACV,cAACc,EAAA,EAAD,MAEV,sBAAM/D,UAAWmD,EAAU7C,IAAO0D,kBAAoB1D,IAAO2D,OAA7D,kD,oCCjDlBC,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACF,QAAS,CACLC,OAAQH,EAAMI,QAAQ,KAG9BC,MAAO,CACHC,QAAS,aAKRC,EAAoC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBACzCC,EAAUX,IAOhB,OACI,sBAAKlE,UAAW6E,EAAQP,KAAxB,UACI,uBAAOQ,OAAO,UAAU9E,UAAW6E,EAAQJ,MAAO7E,GAAG,mBAAmBC,KAAK,OAAOK,SAPlE,SAACyD,GACnBA,EAAEoB,OAAOC,OACTJ,EAAgBjB,EAAEoB,OAAOC,MAAM,OAM/B,uBAAO5C,QAAQ,mBAAf,SACI,cAAC6C,EAAA,EAAD,CAAYC,MAAM,UAAUC,aAAW,iBAAiBC,UAAU,OAAOC,KAAK,SAA9E,SACI,cAAC,IAAD,CAAeC,MAAO,CAACC,SAAU,oBCnCtC,MAA0B,8C,QCiB5BC,EAA8CzC,IAAMC,MAAK,YAAoE,IAAlEE,EAAiE,EAAjEA,iBAAkBD,EAA+C,EAA/CA,OAAQwC,EAAuC,EAAvCA,QAASb,EAA8B,EAA9BA,gBAAiBzB,EAAa,EAAbA,QAExH,OACI,qBAAKnD,UAAWM,IAAOoF,iBAAkBJ,MAAO,CAACK,gBAAgB,OAAD,OAASC,EAAT,MAAhE,SACI,qBAAK5F,UAAWM,IAAOuF,aAAvB,SACKJ,EAEG,qCACI,sBAAKzF,UAAWM,IAAOwF,eAAvB,UACI,qBAAKC,IAAKN,EAAQO,OAAOC,MAAQR,EAAQO,OAAOC,MAAQC,IAAYC,IAAI,gBACxE,uBAAOnG,UAAWmD,EAAU7C,IAAO8F,cAAgB,GAAIhE,QAAQ,mBAA/D,SACKe,GAAW,cAAC,EAAD,CAAcyB,gBAAiBA,SAInD,qBAAK5E,UAAWM,IAAO+F,cAAvB,SAAuCZ,EAAQa,WAC/C,cAACxD,EAAD,CAAwBG,OAAQA,EACRE,QAASA,EACTD,iBAAkBA,OAE5C,cAACa,EAAA,EAAD,W,uECfTwC,EAAgC,SAAC,GAIqC,IAJpCC,EAImC,EAJnCA,WAAYC,EAIuB,EAJvBA,cACTC,EAGgC,EAHhCA,YAAa9G,EAGmB,EAHnBA,GACb+G,EAEgC,EAFhCA,WAAYlB,EAEoB,EAFpBA,QACZmB,EACgC,EADhCA,cAAeC,EACiB,EADjBA,iBACfC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,WAE9D,EAA8B3D,oBAAS,GAAvC,mBAAO/B,EAAP,KAAgB2F,EAAhB,KAsBMC,EAAQ,IAAIC,KACZC,EAAI,UAAMF,EAAMG,UAAZ,YAA0BH,EAAMI,WAAa,EAA7C,YAAmDJ,EAAMK,eAEnE,OACI,sBAAKtH,UAAWM,IAAOiH,cAAvB,UACI,sBAAKvH,UAAWM,IAAOkH,WAAvB,UACI,qBAAKxH,UAAWM,IAAOmH,YAAvB,SACKhC,EACK,qBACEzF,UAAWM,IAAOoH,OAClB3B,IAAKN,EAAQO,OAAOC,MAAQR,EAAQO,OAAOC,MAAQC,IACnDC,IAAI,gBACN,cAACpC,EAAA,EAAD,MAGV,sBAAK/D,UAAWM,IAAOqH,kBAAvB,UACI,qBAAK3H,UAAWM,IAAOsH,SAAvB,gBAAkCnC,QAAlC,IAAkCA,OAAlC,EAAkCA,EAASa,WAC3C,qBAAKtG,UAAWM,IAAO6G,KAAvB,SAA8BA,OAElC,qBAAKnH,UAAWM,IAAOoG,YAAvB,SAAqCA,IACrC,cAAC7F,EAAA,EAAD,CAAcC,gBA3BG,WACzBkG,GAAW,IA0BkDjG,SAAUgG,KAAU,OAAKtB,QAAL,IAAKA,OAAL,EAAKA,EAASoC,aAG3F,qBAAK7H,UAAWM,IAAOwH,WAAYxC,MAAO,CAACK,gBAAgB,OAAD,OAASmB,EAAT,QAI1D,qBAAK9G,UAAWM,IAAOyH,WAAvB,SAEI,sBAAK/H,UAAWM,IAAO0H,qBAAvB,UACI,gCACI,cAAC,IAAD,CAAQhI,UAAWM,IAAO2H,KAAM/G,QAnDhC,WAEhBuF,EAAc7G,EADH4G,EAAa,MAkDgDA,KAE5D,gCACI,cAAC,IAAD,CAAWxG,UAAWM,IAAO4H,QAAShH,QAlDnC,WAEnB2F,EAAiBjH,EADHgH,EAAgB,MAiDmDA,UAI7E,cAACxF,EAAA,EAAD,CAAcE,MAAO,WACPE,eA3CD,WACjBwF,GAAW,IA2CO3F,QAASA,EACTE,gBApDM,WACxBoF,EAAW/G,U,mCCrBNuI,EAAuC,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,QAAS3C,EAAiB,EAAjBA,QAAS7F,EAAQ,EAARA,GAC9DyI,EAASC,YAAU,CACrBC,cAAe,CACXC,QAAS,IAEbC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAIhC,OAHID,EAAOF,SAAWE,EAAOF,QAAQI,OAAS,MAC1CD,EAAOH,QAAU,6BAEdG,GAGXE,SAAU,SAAAH,GACNN,EAAQM,EAAOF,SACfH,EAAOS,UAAU,CACbJ,OAAQ,CAACF,QAAS,SAK9B,OAAO,mCACF/C,GAAW7F,KAAE,OAAK6F,QAAL,IAAKA,OAAL,EAAKA,EAASoC,QACtB,sBAAK7H,UAAWM,IAAOyI,eAAvB,UACE,qBAAK/I,UAAWM,IAAO0I,WAAvB,yBAGA,uBAAMhJ,UAAWM,IAAO2I,UAAWJ,SAAUR,EAAOa,aAApD,UACI,sBAAKlJ,UAAWM,IAAO6I,mBAAvB,UACK1D,EAAU,qBAAKzF,UAAWM,IAAO8I,UAAvB,SACP,qBAAKrD,IAAKN,EAAQO,OAAOC,MAAQR,EAAQO,OAAOC,MAAQC,IAAYC,IAAI,kBACnE,cAACpC,EAAA,EAAD,IACT,cAACpE,EAAA,EAAD,CAAgBE,KAAM,OACNC,YAAa,0BACbC,iBAAkBsI,EAAOgB,cAAc,gBAG3D,sBAAKrJ,UAAWM,IAAOgJ,gBAAvB,UACKjB,EAAOkB,QAAQf,SAAWH,EAAOM,OAAOH,QACrC,qBAAKxI,UAAWM,IAAOkJ,MAAvB,SAA+BnB,EAAOM,OAAOH,UAC3C,KACN,cAACiB,EAAA,EAAD,CAAiB5J,KAAM,SAAUyB,MAAO,kBAIlD,Q,QC/CDoI,EAA+B3G,IAAMC,MAAK,YAAyF,IAAvF2G,EAAsF,EAAtFA,MAAOlE,EAA+E,EAA/EA,QAASgB,EAAsE,EAAtEA,cAAe2B,EAAuD,EAAvDA,QAASzB,EAA8C,EAA9CA,WAAYE,EAAkC,EAAlCA,iBAAkBE,EAAgB,EAAhBA,WAErH6C,EACF,YAAID,GACCE,UACAC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CACNnK,GAAImK,EAAEnK,GAENkH,eAAgBiD,EAAEjD,eAClBrB,QAASA,EACTkB,WAAYA,EACZD,YAAaqD,EAAErD,YACfF,WAAYuD,EAAEvD,WACdI,cAAemD,EAAEnD,cACjBH,cAAeA,EACfI,iBAAkBA,EAClBE,WAAYA,GATPiD,kBAYjB,OACI,sBAAKhK,UAAWM,IAAOyI,eAAvB,UACI,cAAC,EAAD,CAAiBX,QAASA,EAAS3C,QAASA,EAAS7F,GAAImH,IACxD6C,QC1BAK,EAAmBlH,IAAMC,KAAKL,aANnB,SAACL,GACrB,MAAyBA,EAAM4H,YAE/B,MAAO,CAAEP,MAFT,EAAOA,MAESlE,QAFhB,EAAcA,QAEWsB,WADNzE,EAAME,KAAK5C,MAIkC,CAChEwI,YAAS3B,kBAAeE,eAAYE,sBADGlE,CAExC+G,I,kCCPUS,GAAyC,SAAC,GAAc,IAAbtC,EAAY,EAAZA,OACpD,OACI,qBAAK7H,UAAWM,IAAO8J,iBAAvB,SACKC,IAAeP,KAAI,SAACQ,EAAMC,GACvB,OACI,cAAC,IAAD,CAAS1H,GAAE,UAAK2H,IAAKC,QAAV,YAAqB5C,GAArB,OAA8ByC,EAAKI,MAErCC,gBAAiBrK,IAAOsK,cACxB5K,UAAWM,IAAOuK,YAH3B,SAII,sBAAM7K,UAAWM,IAAOwK,aAAxB,SAAuCR,EAAKhJ,SAHlCiJ,S,qBCFrBQ,GAAgC,SAAC,GAAsE,IAArEzJ,EAAoE,EAApEA,MAAO0J,EAA6D,EAA7DA,KAAMC,EAAuD,EAAvDA,UAAW5H,EAA4C,EAA5CA,SAAUtD,EAAkC,EAAlCA,iBAAkBgC,EAAgB,EAAhBA,WAC/F,OACI,sBAAK/B,UAAWiL,EAAhB,UACI,8BAAM3J,IACL+B,EACK,cAAC1D,EAAA,EAAD,CAAgBE,KAAM,OAAQG,UAAW,QAASC,MAAO8B,EAAYhC,iBAAkBA,IACvF,8BAAMiL,GAAc,oBCPzBE,GAAsC,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,aAAcC,EAA8C,EAA9CA,aAAc/H,EAAgC,EAAhCA,SAAUtD,EAAsB,EAAtBA,iBACvF,OAAO,mCACH,sBAAKC,UAAWM,KAAO+K,aAAvB,UACI,8BAAMF,IACL9H,EACK,cAAC1D,EAAA,EAAD,CAAgBE,KAAM,OAAQG,UAAW,QAASC,MAAOmL,EAAcrL,iBAAkBA,IACzF,8BAAMqL,GAA8B,sB,UCIzCE,GAAwC,SAAC,GAMO,IALH7F,EAKE,EALFA,QACA8F,EAIE,EAJFA,uBACAC,EAGE,EAHFA,kBACAnI,EAEE,EAFFA,SACAmG,EACE,EADFA,MAEhDnB,EAASC,YAAU,CACrBC,cAAe,CACXV,OAAQpC,EAAQoC,OAChB4D,QAAShG,EAAQgG,QACjBnF,SAAUb,EAAQa,SAClBoF,eAAgBjG,EAAQiG,eACxBC,0BAA2BlG,EAAQkG,0BACnCC,SAAU,CACNC,SAAUpG,EAAQmG,SAASC,SAC3BC,OAAQrG,EAAQmG,SAASE,OACzBC,UAAWtG,EAAQmG,SAASG,UAC5BC,SAAUvG,EAAQmG,SAASI,SAC3BC,QAASxG,EAAQmG,SAASK,QAC1BC,GAAIzG,EAAQmG,SAASM,GACrBC,QAAS1G,EAAQmG,SAASO,QAC1BC,QAAS3G,EAAQmG,SAASQ,SAE9BpG,OAAQ,CACJqG,MAAO,GACPpG,MAAO,KAGfwC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAIhC,OAHKD,EAAOpC,WACRqC,EAAOrC,SAAW,YAEfqC,GAGXE,SAAU,SAAAH,GACDc,IACDgC,EAAkB9C,GAClB6C,GAAuB,OAKnC,OACI,uBAAMvL,UAAWM,KAAOgM,WAAYzD,SAAUR,EAAOa,aAArD,UACI,mDACA,sBAAKlJ,UAAWM,KAAOiM,eAAvB,UACI,cAAC,GAAD,CAAWjL,MAAO,OACP0J,KAAMvF,EAAQa,SACdvE,WAAYsG,EAAOK,OAAOpC,SAC1B2E,UAAW3K,KAAOkM,UAClBnJ,SAAUA,EACVtD,iBAAkBsI,EAAOgB,cAAc,cAClD,cAAC,GAAD,CAAW/H,MAAO,WACP0J,KAAMvF,EAAQgG,QACd1J,WAAYsG,EAAOK,OAAO+C,QAC1BR,UAAW3K,KAAOmM,aAClBpJ,SAAUA,EACVtD,iBAAkBsI,EAAOgB,cAAc,aAClD,qBAAKrJ,UAAWM,KAAOoM,wBAAvB,SACI,cAAC5K,GAAA,EAAD,CAAmBR,MAAO,qBACPvB,iBAAkBsI,EAAOgB,cAAc,kBACvCtH,WAAYsG,EAAOK,OAAOgD,mBAGjD,cAAC,GAAD,CAAWpK,MAAO,SACPS,WAAYsG,EAAOK,OAAOiD,0BAC1BX,KAAMvF,EAAQkG,0BACdV,UAAW3K,KAAOqM,aAClBtJ,SAAUA,EACVtD,iBAAkBsI,EAAOgB,cAAc,kCAGtD,2DACA,qBAAKrJ,UAAWM,KAAOsM,eAAvB,SACKC,OAAOC,KAAKzE,EAAOK,OAAOkD,UAAU9B,KAAI,SAAAjG,GAErC,OAAO,cAAC,GAAD,CAAmBsH,aAActH,EAAKuH,aAAc/C,EAAOK,OAAOkD,SAAS/H,GAClER,SAAUA,EAAUtD,iBAAkBsI,EAAOgB,cAAc,YAAcxF,IADpEA,QAI7B,cAAC4F,EAAA,EAAD,CAAiBnI,MAAO,qBCvFvByL,GAAgD,SAAC,GACyD,IADxDtH,EACuD,EADvDA,QAAS+F,EAC8C,EAD9CA,kBAAmBrI,EAC2B,EAD3BA,QACzBqG,EAAoD,EAApDA,MAAOwD,EAA6C,EAA7CA,gBAAiBzB,EAA4B,EAA5BA,uBAMtF,OAAO,mCACFyB,EACK,cAAC,GAAD,CACExD,MAAOA,EACPgC,kBAAmBA,EACnBD,uBAAwBA,EACxBlI,SAAU2J,EACVvH,QAASA,IACX,sBAAKzF,UAAWM,KAAOgM,WAAvB,UACE,mDACA,sBAAKtM,UAAWM,KAAOiM,eAAvB,UACI,cAAC,GAAD,CAAWjL,MAAO,OAAQ0J,KAAMvF,EAAQa,SAAU2E,UAAW3K,KAAOkM,YACpE,cAAC,GAAD,CAAWlL,MAAO,WAAY0J,KAAMvF,EAAQgG,QAASR,UAAW3K,KAAOmM,eACvE,cAAC,GAAD,CAAWnL,MAAO,oBAAqB0J,KAAMvF,EAAQiG,eAAiB,MAAQ,KACnET,UAAW3K,KAAO2M,kBAC7B,cAAC,GAAD,CAAW3L,MAAO,SAAU0J,KAAMvF,EAAQkG,0BAC/BV,UAAW3K,KAAOqM,kBAGjC,2DACA,qBAAK3M,UAAWM,KAAOsM,eAAvB,SACKC,OAAOC,KAAKrH,EAAQmG,UAAU9B,KAAI,SAAAjG,GAE/B,OAAO,cAAC,GAAD,CAAmBsH,aAActH,EAAKuH,aAAc3F,EAAQmG,SAAS/H,IAAvDA,QAG5BV,GAAW,cAACsG,EAAA,EAAD,CAAiB5H,SA9BrB,WAChB0J,GAAuB,IA6BqCjK,MAAO,uBCnC9D4L,GAA6BnK,IAAMC,MAAK,YAA4F,IAA1FyC,EAAyF,EAAzFA,QAAS+F,EAAgF,EAAhFA,kBAAmBrI,EAA6D,EAA7DA,QAASqG,EAAoD,EAApDA,MAAOwD,EAA6C,EAA7CA,gBAAiBzB,EAA4B,EAA5BA,uBAEhH,OACI,qBAAKvL,UAAWM,KAAO6M,eAAvB,SACK1H,EACK,cAAC,GAAD,CAAcA,QAASA,EACT8F,uBAAwBA,EACxBC,kBAAmBA,EACnBrI,QAASA,EACTqG,MAAOA,EACPwD,gBAAiBA,IAC/B,cAACjJ,EAAA,EAAD,S,qBCvBLqJ,GAAYrK,IAAMC,MAAK,WAChC,OACI,qBAAKhD,UAAWM,KAAO+M,uBAAvB,wBCmBKC,GAAsCvK,IAAMC,MAAK,YAIQ,IAHHyC,EAGE,EAHFA,QAASxC,EAGP,EAHOA,OAAQC,EAGf,EAHeA,iBACjB0B,EAEE,EAFFA,gBAAiBzB,EAEf,EAFeA,QAASoK,EAExB,EAFwBA,aAC1B/B,EACE,EADFA,kBAAmBhC,EACjB,EADiBA,MAAOwD,EACxB,EADwBA,gBAAiBzB,EACzC,EADyCA,uBAE1G,OACI,sBAAKvL,UAAWM,IAAOkN,eAAvB,UACI,cAAChI,EAAD,CACIrC,QAASA,EACTsC,QAASA,EACTxC,OAAQA,EACR2B,gBAAiBA,EACjB1B,iBAAkBA,IACtB,cAAC,GAAD,CAAmB2E,OAAQ1E,EAAO,OAAGsC,QAAH,IAAGA,OAAH,EAAGA,EAASoC,OAAS0F,IACvD,sBAAKvN,UAAWM,IAAOmN,gBAAvB,UACI,cAAC,IAAD,CAAO/C,KAAI,UAAKF,IAAKC,QAAV,YAAqB8C,GAArB,OAAoC/C,IAAKkD,OAASC,OAAQ,kBAAM,cAACT,GAAD,CACvE1D,MAAOA,EACP+B,uBAAwBA,EACxByB,gBAAiBA,EACjB7J,QAASA,EACTqI,kBAAmBA,EACnB/F,QAASA,OACb,cAAC,IAAD,CAAOiF,KAAI,UAAKF,IAAKC,QAAV,YAAqB8C,GAArB,OAAoC/C,IAAKoD,SAAWD,OAAQ,kBAAM,cAACP,GAAD,OAC7E,cAAC,IAAD,CAAO1C,KAAI,UAAKF,IAAKC,QAAV,YAAqB8C,GAArB,OAAoC/C,IAAKqD,OAASF,OAAQ,kBAAM,cAAC1D,EAAD,gB,UCLrF6D,G,oKAEF,WACI,IAAIjG,EAAwBkG,OAAOC,KAAKpL,MAAMqL,MAAMC,OAAOrG,QACtDA,IACDA,EAASmG,KAAKpL,MAAMhD,KAEhBoO,KAAKpL,MAAMuL,QAAQC,KAAK,UAGV,kBAAXvG,GACPmG,KAAKpL,MAAMyL,mBAAmBxG,GAEZ,kBAAXA,GACPmG,KAAKpL,MAAM0L,kBAAkBzG,K,+BAIrC,WACImG,KAAKO,mB,gCAGT,SAAmBC,EAAgCC,GAC3CT,KAAKpL,MAAMqL,MAAMC,OAAOrG,SAAW2G,EAAUP,MAAMC,OAAOrG,QAC1DmG,KAAKO,mB,oBAIb,WAEI,OACI,cAACjB,GAAD,CAAS7H,QAASuI,KAAKpL,MAAM6C,QACpBtC,SAAU6K,KAAKpL,MAAMqL,MAAMC,OAAOrG,QAAUkG,OAAOC,KAAKpL,MAAMqL,MAAMC,OAAOrG,UAAYmG,KAAKpL,MAAMhD,GAClG2N,aAAcQ,OAAOC,KAAKpL,MAAMqL,MAAMC,OAAOrG,QAC7C5E,OAAQ+K,KAAKpL,MAAMK,OACnBuG,MAAOwE,KAAKpL,MAAM4G,MAClBwD,gBAAiBgB,KAAKpL,MAAMoK,gBAC5BzB,uBAAwByC,KAAKpL,MAAM2I,uBACnC3G,gBAAiBoJ,KAAKpL,MAAMgC,gBAC5B4G,kBAAmBwC,KAAKpL,MAAM4I,kBAC9BtI,iBAAkB8K,KAAKpL,MAAMM,uB,GAxCnBH,IAAM2L,eAmDtBC,sBACXhM,aAPoB,SAACL,GACrB,MAA2CA,EAAM4H,YAA1CzE,EAAP,EAAOA,QAASxC,EAAhB,EAAgBA,OAAQ+J,EAAxB,EAAwBA,gBACxB,EAA4B1K,EAAME,KAClC,MAAO,CAACiD,UAASxC,SAAQrD,GADzB,EAAOA,GACsB2C,OAD7B,EAAWA,OAC0BiH,MADrC,EAAmBA,MACyBwD,qBAInB,CAACqB,uBAAoBC,sBAC1CpL,qBAAkB0B,oBAAiB4G,sBAAmBD,6BAC1DqD,IACAnM,KAJWkM,CAKbb","file":"static/js/4.02812d2b.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport styles from \"./UniversalInput.module.scss\";\r\n\r\ntype PropsType = {\r\n    id?: string\r\n    type: string\r\n    placeholder?: string\r\n    formikFieldProps?: any\r\n    className?: \"login\" | \"status\"\r\n    value?: undefined | string\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    autoFocus?: boolean\r\n    onBlur?: () => void\r\n    onKeyUp?: (e: KeyboardEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const UniversalInput: React.FC<PropsType> = ({\r\n                                                        id,\r\n                                                        type,\r\n                                                        placeholder,\r\n                                                        formikFieldProps,\r\n                                                        className,\r\n                                                        value,\r\n                                                        onChange,\r\n                                                        autoFocus,\r\n                                                        onBlur,\r\n                                                        onKeyUp\r\n                                                    }) => {\r\n    return (\r\n            <input\r\n                id={id}\r\n                className={className === \"login\" ? styles.loginInput : styles.formInput\r\n                    ? className === \"status\" ? styles.statusInput : styles.formInput : styles.formInput}\r\n                type={type}\r\n                placeholder={placeholder}\r\n                required\r\n                autoFocus={autoFocus}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                onKeyUp={onKeyUp}\r\n                value={value}\r\n                {...formikFieldProps}\r\n            />\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"UniversalInput_formInput__3yZbU\",\"loginInput\":\"UniversalInput_loginInput__20Stk\",\"statusInput\":\"UniversalInput_statusInput__3jznv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutContainer\":\"About_aboutContainer__2LIEn\",\"aboutBlock\":\"About_aboutBlock__EZiww\",\"basicInfoBlock\":\"About_basicInfoBlock__3GHda\",\"nameBlock\":\"About_nameBlock__1Uegn\",\"aboutMeBlock\":\"About_aboutMeBlock__2-BVZ\",\"lookingJobBlock\":\"About_lookingJobBlock__3UZEj\",\"lookingJobEditModeBlock\":\"About_lookingJobEditModeBlock__2BGue\",\"jobDescBlock\":\"About_jobDescBlock__3d7pn\",\"linksInfoBlock\":\"About_linksInfoBlock__1_9ue\",\"contactBlock\":\"About_contactBlock__RkBUY\"};","import styles from \"./DeleteButton.module.scss\";\r\nimport {MdDelete} from \"react-icons/all\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    onDeleteHandler: () => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const DeleteButton: React.FC<PropsType> = ({onDeleteHandler, disabled}) => {\r\n    return (\r\n        <div className={styles.deleteBlock} >\r\n            <div className={styles.deleteButton}>\r\n                <button disabled={disabled} onClick={onDeleteHandler}>\r\n                    <MdDelete className={styles.icon}/>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteBlock\":\"DeleteButton_deleteBlock__20pgZ\",\"deleteButton\":\"DeleteButton_deleteButton__2K7YW\",\"icon\":\"DeleteButton_icon__2d71H\"};","import React, {useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreType} from \"../../../../redux-state/redux-store\";\r\nimport {AuthUserType, setError} from \"../../../../redux-state/auth-reducer\";\r\nimport styles from \"./ConfirmModal.module.scss\";\r\nimport {UniversalButton} from \"../../universal-button/UniversalButton\";\r\n\r\ntype PropsType = {\r\n    confirm: boolean\r\n    title: string\r\n    confirmCallback: () => void\r\n    cancelCallback: () => void\r\n}\r\nexport const ConfirmModal: React.FC<PropsType> = ({\r\n                                                      confirm,\r\n                                                      title,\r\n                                                      confirmCallback,\r\n                                                      cancelCallback\r\n                                                  }) => {\r\n\r\n    return (\r\n        <div className={confirm ? styles.modalContainer : styles.noModal}>\r\n            <div className={styles.text}>{title}</div>\r\n            <div className={styles.confirmBlock}>\r\n                <UniversalButton callback={confirmCallback} title={\"Ok\"}/>\r\n                <UniversalButton callback={cancelCallback} title={\"Cancel\"} className={true}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalContainer\":\"ConfirmModal_modalContainer__3h725\",\"text\":\"ConfirmModal_text__2KoFI\",\"confirmBlock\":\"ConfirmModal_confirmBlock__2ahR6\",\"noModal\":\"ConfirmModal_noModal__2qRHI\"};","import React from \"react\";\r\nimport styles from \"./UniversalCheckbox.module.scss\"\r\n\r\ntype PropsType = {\r\n    title: string\r\n    inputValue?: boolean\r\n    formikFieldProps?: any\r\n}\r\n\r\nexport const UniversalCheckbox: React.FC<PropsType>= ({title, inputValue, formikFieldProps}) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.box}>\r\n                <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\" checked={inputValue} {...formikFieldProps}/>\r\n                <label htmlFor=\"checkbox\">\r\n                    <div><i className=\"fas fa-check\"> </i></div>\r\n                    {title}</label>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UniversalCheckbox_wrapper__1DsgV\",\"box\":\"UniversalCheckbox_box__2vCO8\",\"anim\":\"UniversalCheckbox_anim__cn3Cj\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {StoreType} from \"../../redux-state/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state: StoreType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n    const withRedirect = (props: any) => {\r\n        if (!props.isAuth) return <Redirect to=\"/login\"/>\r\n        return <Component {...props}/>\r\n    }\r\n    return connect(mapStateToProps)(withRedirect)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__1ukOh\",\"profileNavPanel\":\"Profile_profileNavPanel__3s_UC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentContainer\":\"ProfileInfo_contentContainer__3sVIb\",\"contentBlock\":\"ProfileInfo_contentBlock__wXZAZ\",\"imageContainer\":\"ProfileInfo_imageContainer__2SDPn\",\"fileContainer\":\"ProfileInfo_fileContainer__3B-ZW\",\"userNameTitle\":\"ProfileInfo_userNameTitle__25pOF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusContainer\":\"ProfileStatusWithHooks_statusContainer__1bPq0\",\"statusBlock\":\"ProfileStatusWithHooks_statusBlock__1RmZy\",\"statusDescription\":\"ProfileStatusWithHooks_statusDescription__2xaif\",\"statusDesc\":\"ProfileStatusWithHooks_statusDesc__1ynp9\",\"noDesc\":\"ProfileStatusWithHooks_noDesc__1X-hX\",\"status\":\"ProfileStatusWithHooks_status__3dkFO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"MyPosts_postsContainer__1Lrps\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postContainer\":\"Post_postContainer__FAuKW\",\"titleBlock\":\"Post_titleBlock__33v-1\",\"avatarBlock\":\"Post_avatarBlock__1xqFu\",\"avatar\":\"Post_avatar__OPeTU\",\"userNameDateBlock\":\"Post_userNameDateBlock__22iO1\",\"userName\":\"Post_userName__2F4_a\",\"postMessage\":\"Post_postMessage__3hXiA\",\"imageBlock\":\"Post_imageBlock__2ftef\",\"likesBlock\":\"Post_likesBlock__RQwDo\",\"likeDislikeContainer\":\"Post_likeDislikeContainer__XR5B_\",\"like\":\"Post_like__1j4Dz\",\"dislike\":\"Post_dislike__gdzsL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsContainer\":\"ProfilePostForm_postsContainer__1Yabx\",\"postsTitle\":\"ProfilePostForm_postsTitle__37O0F\",\"formBlock\":\"ProfilePostForm_formBlock__3gxId\",\"formBlockEnterText\":\"ProfilePostForm_formBlockEnterText__xMSlt\",\"userPhoto\":\"ProfilePostForm_userPhoto__NJztW\",\"formBlockSubmit\":\"ProfilePostForm_formBlockSubmit__1Lsni\",\"error\":\"ProfilePostForm_error__FBeCe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profNavContainer\":\"ProfileNavigation_profNavContainer__2l5AW\",\"profNavItem\":\"ProfileNavigation_profNavItem__qfxEZ\",\"profNavTitle\":\"ProfileNavigation_profNavTitle__1F__x\",\"profNavActive\":\"ProfileNavigation_profNavActive__1eLrM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"aboutMyFriendContainer\":\"MyFriends_aboutMyFriendContainer__3uka4\"};","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport styles from \"./ProfileStatusWithHooks.module.scss\";\r\nimport {UniversalInput} from \"../../../common/universal-input/UniversalInput\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    changeUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<PropsType> = React.memo(({status, changeUserStatus, isOwner}) => {\r\n    const [editMode, setEditMode] = React.useState(false)\r\n    const [localStatus, setLocalStatus] = React.useState(status)\r\n\r\n    React.useEffect(() => {\r\n        setLocalStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        changeUserStatus(localStatus)\r\n    }\r\n\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyDeactivateEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            setEditMode(false)\r\n            changeUserStatus(localStatus)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className={styles.statusContainer}>\r\n                {editMode && isOwner\r\n                    ? <UniversalInput\r\n                        type=\"text\"\r\n                        className={\"status\"}\r\n                        autoFocus={true}\r\n                        onChange={onChangeStatusHandler}\r\n                        onBlur={deactivateEditMode}\r\n                        onKeyUp={onKeyDeactivateEditMode}\r\n                        value={localStatus}/>\r\n                    :\r\n                    <div className={styles.statusBlock}>\r\n                        <span className={styles.status}\r\n                              onClick={activateEditMode}>\r\n                            {status === localStatus\r\n                                ? status || \"Empty status\"\r\n                                : <Preloader/>}\r\n                        </span>\r\n                        <span className={isOwner ? styles.statusDescription : styles.noDesc}>\r\n                            Click to change status !!!\r\n                        </span>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","import React, {ChangeEvent} from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {GoCloudUpload} from \"react-icons/all\";\r\n\r\ntype PropsType = {\r\n    changeUserPhoto: (photos: File) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n            },\r\n        },\r\n        input: {\r\n            display: 'none',\r\n        },\r\n    }),\r\n);\r\n\r\nexport const UploadButton: React.FC<PropsType> = ({changeUserPhoto}) => {\r\n    const classes = useStyles();\r\n\r\n    const onChangeUserPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            changeUserPhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\" onChange={onChangeUserPhoto}/>\r\n            <label htmlFor=\"icon-button-file\">\r\n                <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" size=\"medium\">\r\n                    <GoCloudUpload style={{fontSize: \"2.5rem\"}}/>\r\n                </IconButton>\r\n            </label>\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/profileBackground.97fd62ef.jpg\";","import React from \"react\";\r\nimport styles from \"./ProfileInfo.module.scss\"\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux-state/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./profile-status/ProfileStatusWithHooks\";\r\nimport {UploadButton} from \"./upload-button/UploadButton\";\r\nimport profileBackgroundImg from \"./../../../images/profileBackground.jpg\"\r\nimport userAvatar from \"../../../images/userAvatar.jpg\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (status: string) => void\r\n    changeUserPhoto: (photos: File) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = React.memo(({changeUserStatus, status, profile, changeUserPhoto, isOwner}) => {\r\n\r\n    return (\r\n        <div className={styles.contentContainer} style={{backgroundImage: `url(${profileBackgroundImg})`}}>\r\n            <div className={styles.contentBlock}>\r\n                {profile\r\n                    ?\r\n                    <>\r\n                        <div className={styles.imageContainer}>\r\n                            <img src={profile.photos.large ? profile.photos.large : userAvatar} alt=\"user-avatar\"/>\r\n                            <label className={isOwner ? styles.fileContainer : \"\"} htmlFor=\"icon-button-file\">\r\n                                {isOwner && <UploadButton changeUserPhoto={changeUserPhoto}/>}\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className={styles.userNameTitle}>{profile.fullName}</div>\r\n                        <ProfileStatusWithHooks status={status}\r\n                                                isOwner={isOwner}\r\n                                                changeUserStatus={changeUserStatus}/>\r\n                    </>\r\n                    : <Preloader/>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n});\r\n","import React, {useState} from \"react\";\r\nimport styles from \"./Post.module.scss\"\r\nimport userAvatar from \"./../../../../images/userAvatar.jpg\"\r\nimport {ProfileType} from \"../../../../redux-state/profile-reducer\";\r\nimport {BiDislike, BiLike} from \"react-icons/all\";\r\nimport {DeleteButton} from \"../../../common/delete-button/DeleteButton\";\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport {ConfirmModal} from \"../../../common/modal/modal-confirm/ConfirmModal\";\r\n\r\ntype PostPropsType = {\r\n    id: string\r\n    postMessage: string\r\n    likesCount: number\r\n    dislikesCount: number\r\n    setLikesCount: (id: string, like: number) => void\r\n    setDislikesCount: (id: string, dislike: number) => void\r\n    deletePost: (id: string) => void\r\n    profile: ProfileType | null\r\n    postBackground: string\r\n    authUserId: number | null\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = ({likesCount, setLikesCount,\r\n                                                  postMessage, id,\r\n                                                  deletePost, profile,\r\n                                                  dislikesCount, setDislikesCount,\r\n                                                  postBackground, authUserId}) => {\r\n\r\n    const [confirm, setConfirm] = useState(false)\r\n\r\n    const onLikeClick = () => {\r\n        let like = likesCount + 1\r\n        setLikesCount(id, like)\r\n    }\r\n    const onDislikeClick = () => {\r\n        let dislike = dislikesCount + 1\r\n        setDislikesCount(id, dislike)\r\n    }\r\n\r\n    const onPostDeleteHandler = () => {\r\n        deletePost(id)\r\n    }\r\n\r\n    const onModalDeleteHandler = () => {\r\n        setConfirm(true)\r\n    }\r\n    const cancelDelete = () => {\r\n        setConfirm(false)\r\n    }\r\n\r\n    const today = new Date()\r\n    const date = `${today.getDate()}-${(today.getMonth() + 1)}-${today.getFullYear()}`\r\n\r\n    return (\r\n        <div className={styles.postContainer}>\r\n            <div className={styles.titleBlock}>\r\n                <div className={styles.avatarBlock}>\r\n                    {profile\r\n                        ? <img\r\n                            className={styles.avatar}\r\n                            src={profile.photos.large ? profile.photos.large : userAvatar}\r\n                            alt=\"user-avatar\"/>\r\n                        : <Preloader/>}\r\n                </div>\r\n\r\n                <div className={styles.userNameDateBlock}>\r\n                    <div className={styles.userName}>{profile?.fullName}</div>\r\n                    <div className={styles.date}>{date}</div>\r\n                </div>\r\n                <div className={styles.postMessage}>{postMessage}</div>\r\n                <DeleteButton onDeleteHandler={onModalDeleteHandler} disabled={authUserId !== profile?.userId}/>\r\n            </div>\r\n\r\n            <div className={styles.imageBlock} style={{backgroundImage: `url(${postBackground})`}}>\r\n\r\n            </div>\r\n\r\n            <div className={styles.likesBlock}>\r\n\r\n                <div className={styles.likeDislikeContainer}>\r\n                    <div>\r\n                        <BiLike className={styles.like} onClick={onLikeClick}/>{likesCount}\r\n                    </div>\r\n                    <div>\r\n                        <BiDislike className={styles.dislike} onClick={onDislikeClick}/>{dislikesCount}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ConfirmModal title={\"Delete ?\"}\r\n                          cancelCallback={cancelDelete}\r\n                          confirm={confirm}\r\n                          confirmCallback={onPostDeleteHandler}/>\r\n        </div>\r\n    )\r\n};","import styles from \"./ProfilePostForm.module.scss\";\r\nimport React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {UniversalButton} from \"../../common/universal-button/UniversalButton\";\r\nimport {UniversalInput} from \"../../common/universal-input/UniversalInput\";\r\nimport {ProfileType} from \"../../../redux-state/profile-reducer\";\r\nimport {Preloader} from \"../../common/preloader/Preloader\";\r\nimport userAvatar from \"../../../images/userAvatar.jpg\"\r\n\r\ntype FormikErrorType = {\r\n    newPost?: string\r\n}\r\n\r\ntype PropsType = {\r\n    addPost: (newPost: string) => void\r\n    profile: ProfileType | null\r\n    id: number | null\r\n}\r\n\r\nexport const ProfilePostForm: React.FC<PropsType> = ({addPost, profile, id}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPost: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (values.newPost && values.newPost.length > 100) {\r\n                errors.newPost = 'Max length is 100 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            addPost(values.newPost)\r\n            formik.resetForm({\r\n                values: {newPost: '',}\r\n            })\r\n        },\r\n    })\r\n\r\n    return <>\r\n        {profile && id === profile?.userId\r\n            ? <div className={styles.postsContainer}>\r\n                <div className={styles.postsTitle}>\r\n                    Create Post\r\n                </div>\r\n                <form className={styles.formBlock} onSubmit={formik.handleSubmit}>\r\n                    <div className={styles.formBlockEnterText}>\r\n                        {profile ? <div className={styles.userPhoto}>\r\n                            <img src={profile.photos.large ? profile.photos.large : userAvatar} alt=\"user-avatar\"/>\r\n                        </div> : <Preloader/>}\r\n                        <UniversalInput type={\"text\"}\r\n                                        placeholder={\"Write something here...\"}\r\n                                        formikFieldProps={formik.getFieldProps(\"newPost\")}/>\r\n                    </div>\r\n\r\n                    <div className={styles.formBlockSubmit}>\r\n                        {formik.touched.newPost && formik.errors.newPost ?\r\n                            <div className={styles.error}>{formik.errors.newPost}</div>\r\n                            : null}\r\n                        <UniversalButton type={\"submit\"} title={\"post\"}/>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            : null\r\n        }\r\n    </>\r\n}","import React from \"react\";\r\nimport styles from \"./MyPosts.module.scss\"\r\nimport {Post} from \"./post/Post\";\r\nimport {PostType, ProfileType} from \"../../../redux-state/profile-reducer\";\r\nimport {ProfilePostForm} from \"../profile-post-form/ProfilePostForm\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (newPostText: string) => void\r\n    setLikesCount: (id: string, like: number) => void\r\n    setDislikesCount: (id: string, dislike: number) => void\r\n    deletePost: (id: string) => void\r\n    profile: ProfileType | null\r\n    authUserId: number | null\r\n}\r\n\r\nexport const MyPosts: React.FC<PropsType> = React.memo(({posts, profile, setLikesCount, addPost, deletePost, setDislikesCount, authUserId}) => {\r\n\r\n    const postElements =\r\n        [...posts]\r\n            .reverse()\r\n            .map(p => <Post\r\n                id={p.id}\r\n                key={v1()}\r\n                postBackground={p.postBackground}\r\n                profile={profile}\r\n                deletePost={deletePost}\r\n                postMessage={p.postMessage}\r\n                likesCount={p.likesCount}\r\n                dislikesCount={p.dislikesCount}\r\n                setLikesCount={setLikesCount}\r\n                setDislikesCount={setDislikesCount}\r\n                authUserId={authUserId}\r\n            />)\r\n\r\n    return (\r\n        <div className={styles.postsContainer}>\r\n            <ProfilePostForm addPost={addPost} profile={profile} id={authUserId}/>\r\n            {postElements}\r\n        </div>\r\n    )\r\n})","import {addPost, deletePost, setDislikesCount, setLikesCount} from \"../../../redux-state/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../../redux-state/redux-store\";\r\nimport React from \"react\";\r\n\r\n\r\nconst mapStateToProps = (state: StoreType) => {\r\n    const {posts, profile} = state.profilePage;\r\n    const authUserId = state.auth.id;\r\n    return { posts, profile, authUserId}\r\n}\r\n\r\nexport const MyPostsContainer = React.memo(connect(mapStateToProps, {\r\n    addPost, setLikesCount, deletePost, setDislikesCount\r\n})(MyPosts))","import React from \"react\";\r\nimport {PATH, profileNavData} from \"../../common/SidebarData\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport styles from \"./ProfileNavigation.module.scss\"\r\ntype PropsType = {\r\n    userId: number | undefined\r\n}\r\n\r\nexport const ProfileNavigation: React.FC<PropsType> = ({userId}) => {\r\n    return (\r\n        <div className={styles.profNavContainer}>\r\n            {profileNavData.map((item, index) => {\r\n                return (\r\n                    <NavLink to={`${PATH.PROFILE}/${userId}${item.path}`}\r\n                             key={index}\r\n                             activeClassName={styles.profNavActive}\r\n                             className={styles.profNavItem}>\r\n                        <span className={styles.profNavTitle}>{item.title}</span>\r\n                    </NavLink>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {UniversalInput} from \"../../../../common/universal-input/UniversalInput\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    data: any\r\n    classname?: any\r\n    editMode?: boolean\r\n    formikFieldProps?: any\r\n    inputValue?: any\r\n}\r\n\r\nexport const AboutItem:React.FC<PropsType> = ({title, data, classname, editMode, formikFieldProps, inputValue}) => {\r\n    return (\r\n        <div className={classname}>\r\n            <div>{title}</div>\r\n            {editMode\r\n                ? <UniversalInput type={\"text\"} className={\"login\"} value={inputValue} formikFieldProps={formikFieldProps}/>\r\n                : <div>{data ? data : \"Empty field\"}</div>}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"../../About.module.scss\";\r\nimport {UniversalInput} from \"../../../../../common/universal-input/UniversalInput\";\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n    editMode?: boolean\r\n    formikFieldProps?: any\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue, editMode, formikFieldProps}) => {\r\n    return <>\r\n        <div className={styles.contactBlock}>\r\n            <div>{contactTitle}</div>\r\n            {editMode\r\n                ? <UniversalInput type={\"text\"} className={\"login\"} value={contactValue} formikFieldProps={formikFieldProps}/>\r\n                : <div>{contactValue ? contactValue : \"Empty field\"}</div>\r\n            }\r\n        </div>\r\n    </>\r\n}","import {useFormik} from \"formik\";\r\nimport {ProfileType} from \"../../../../../redux-state/profile-reducer\";\r\nimport styles from \"../About.module.scss\";\r\nimport {AboutItem} from \"../about-item/AboutItem\";\r\nimport {Contact} from \"./contact/Contact\";\r\nimport React from \"react\";\r\nimport {UniversalButton} from \"../../../../common/universal-button/UniversalButton\";\r\nimport {UniversalCheckbox} from \"../../../../common/universal-checkbox/UniversalCheckbox\";\r\n\r\ntype FormikErrorType = {\r\n    fullName?: string\r\n}\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    setUserProfileEditMode: (editMode: boolean) => void\r\n    changeUserProfile: (profile: ProfileType) => void\r\n    editMode: boolean\r\n    error: string\r\n}\r\n\r\nexport const UserContactsForm: React.FC<PropsType> = ({\r\n                                                          profile,\r\n                                                          setUserProfileEditMode,\r\n                                                          changeUserProfile,\r\n                                                          editMode,\r\n                                                          error\r\n                                                      }) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            userId: profile.userId,\r\n            aboutMe: profile.aboutMe,\r\n            fullName: profile.fullName,\r\n            lookingForAJob: profile.lookingForAJob,\r\n            lookingForAJobDescription: profile.lookingForAJobDescription,\r\n            contacts: {\r\n                facebook: profile.contacts.facebook,\r\n                github: profile.contacts.github,\r\n                instagram: profile.contacts.instagram,\r\n                mainLink: profile.contacts.mainLink,\r\n                twitter: profile.contacts.twitter,\r\n                vk: profile.contacts.vk,\r\n                website: profile.contacts.website,\r\n                youtube: profile.contacts.youtube,\r\n            },\r\n            photos: {\r\n                small: \"\",\r\n                large: \"\"\r\n            }\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.fullName) {\r\n                errors.fullName = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            if (!error) {\r\n                changeUserProfile(values)\r\n                setUserProfileEditMode(false)\r\n            }\r\n        },\r\n    })\r\n\r\n    return (\r\n        <form className={styles.aboutBlock} onSubmit={formik.handleSubmit}>\r\n            <h2>Basic Information</h2>\r\n            <div className={styles.basicInfoBlock}>\r\n                <AboutItem title={\"Name\"}\r\n                           data={profile.fullName}\r\n                           inputValue={formik.values.fullName}\r\n                           classname={styles.nameBlock}\r\n                           editMode={editMode}\r\n                           formikFieldProps={formik.getFieldProps(\"fullName\")}/>\r\n                <AboutItem title={\"About me\"}\r\n                           data={profile.aboutMe}\r\n                           inputValue={formik.values.aboutMe}\r\n                           classname={styles.aboutMeBlock}\r\n                           editMode={editMode}\r\n                           formikFieldProps={formik.getFieldProps(\"aboutMe\")}/>\r\n                <div className={styles.lookingJobEditModeBlock}>\r\n                    <UniversalCheckbox title={\"Looking for a job?\"}\r\n                                       formikFieldProps={formik.getFieldProps(\"lookingForAJob\")}\r\n                                       inputValue={formik.values.lookingForAJob}/>\r\n                </div>\r\n\r\n                <AboutItem title={\"Skills\"}\r\n                           inputValue={formik.values.lookingForAJobDescription}\r\n                           data={profile.lookingForAJobDescription}\r\n                           classname={styles.jobDescBlock}\r\n                           editMode={editMode}\r\n                           formikFieldProps={formik.getFieldProps(\"lookingForAJobDescription\")}/>\r\n            </div>\r\n\r\n            <h2>Websites and Social Links</h2>\r\n            <div className={styles.linksInfoBlock}>\r\n                {Object.keys(formik.values.contacts).map(key => {\r\n                    // @ts-ignore\r\n                    return <Contact key={key} contactTitle={key} contactValue={formik.values.contacts[key]}\r\n                                    editMode={editMode} formikFieldProps={formik.getFieldProps(\"contacts.\" + key)}/>\r\n                })}\r\n            </div>\r\n            <UniversalButton title={\"save profile\"}/>\r\n        </form>\r\n    )\r\n}","import {ProfileType} from \"../../../../../redux-state/profile-reducer\";\r\nimport React from \"react\";\r\nimport styles from \"../About.module.scss\";\r\nimport {AboutItem} from \"../about-item/AboutItem\";\r\nimport {Contact} from \"./contact/Contact\";\r\nimport {UserContactsForm} from \"./UserContactsForm\";\r\nimport {UniversalButton} from \"../../../../common/universal-button/UniversalButton\";\r\n\r\ntype UserContactsPropsType = {\r\n    profile: ProfileType\r\n    changeUserProfile: (profile: ProfileType) => void\r\n    setUserProfileEditMode: (editMode: boolean) => void\r\n    isOwner: boolean\r\n    error: string\r\n    profileEditMode: boolean\r\n}\r\n\r\nexport const UserContacts: React.FC<UserContactsPropsType> = ({profile, changeUserProfile, isOwner,\r\n                                                                  error, profileEditMode, setUserProfileEditMode}) => {\r\n\r\n    const setEditMode = () => {\r\n        setUserProfileEditMode(true)\r\n    }\r\n\r\n    return <>\r\n        {profileEditMode\r\n            ? <UserContactsForm\r\n                error={error}\r\n                changeUserProfile={changeUserProfile}\r\n                setUserProfileEditMode={setUserProfileEditMode}\r\n                editMode={profileEditMode}\r\n                profile={profile}/>\r\n            : <div className={styles.aboutBlock}>\r\n                <h2>Basic Information</h2>\r\n                <div className={styles.basicInfoBlock}>\r\n                    <AboutItem title={\"Name\"} data={profile.fullName} classname={styles.nameBlock}/>\r\n                    <AboutItem title={\"About me\"} data={profile.aboutMe} classname={styles.aboutMeBlock}/>\r\n                    <AboutItem title={\"Looking for a job\"} data={profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                               classname={styles.lookingJobBlock}/>\r\n                    <AboutItem title={\"Skills\"} data={profile.lookingForAJobDescription}\r\n                               classname={styles.jobDescBlock}/>\r\n                </div>\r\n\r\n                <h2>Websites and Social Links</h2>\r\n                <div className={styles.linksInfoBlock}>\r\n                    {Object.keys(profile.contacts).map(key => {\r\n                        // @ts-ignore\r\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                    })}\r\n                </div>\r\n                {isOwner && <UniversalButton callback={setEditMode} title={\"Edit profile\"}/>}\r\n            </div>\r\n        }\r\n    </>\r\n}","import React, {useState} from \"react\";\r\nimport styles from \"./About.module.scss\";\r\nimport {ProfileType} from \"../../../../redux-state/profile-reducer\";\r\nimport {Preloader} from \"../../../common/preloader/Preloader\";\r\nimport {UserContacts} from \"./user-contacts/UserContacts\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    changeUserProfile: (profile: ProfileType) => void\r\n    setUserProfileEditMode: (editMode: boolean) => void\r\n    isOwner: boolean\r\n    error: string\r\n    profileEditMode: boolean\r\n}\r\n\r\nexport const About: React.FC<PropsType> = React.memo(({profile, changeUserProfile, isOwner, error, profileEditMode, setUserProfileEditMode}) => {\r\n\r\n    return (\r\n        <div className={styles.aboutContainer}>\r\n            {profile\r\n                ? <UserContacts profile={profile}\r\n                                setUserProfileEditMode={setUserProfileEditMode}\r\n                                changeUserProfile={changeUserProfile}\r\n                                isOwner={isOwner}\r\n                                error={error}\r\n                                profileEditMode={profileEditMode}/>\r\n                : <Preloader/>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport styles from \"./MyFriends.module.scss\";\r\n\r\nexport const MyFriends = React.memo(() => {\r\n    return (\r\n        <div className={styles.aboutMyFriendContainer}>\r\n            Friends\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport styles from \"./Profile.module.scss\"\r\nimport {ProfileInfo} from \"./profile-info/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./my-posts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux-state/profile-reducer\";\r\nimport {ProfileNavigation} from \"./profile-navigation/ProfileNavigation\";\r\nimport {Route} from \"react-router-dom\";\r\nimport {PATH} from \"../common/SidebarData\";\r\nimport {About} from \"./profile-info/about-me/About\";\r\nimport {MyFriends} from \"./profile-info/my-friends/MyFriends\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    changeUserStatus: (status: string) => void\r\n    changeUserPhoto: (photos: File) => void\r\n    changeUserProfile: (profile: ProfileType) => void\r\n    setUserProfileEditMode: (editMode: boolean) => void\r\n    isOwner: boolean\r\n    paramsUserId: number\r\n    error: string\r\n    profileEditMode: boolean\r\n}\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = React.memo(({\r\n                                                                   profile, status, changeUserStatus,\r\n                                                                   changeUserPhoto, isOwner, paramsUserId,\r\n                                                                   changeUserProfile, error, profileEditMode, setUserProfileEditMode\r\n                                                               }) => {\r\n    return (\r\n        <div className={styles.profileWrapper}>\r\n            <ProfileInfo\r\n                isOwner={isOwner}\r\n                profile={profile}\r\n                status={status}\r\n                changeUserPhoto={changeUserPhoto}\r\n                changeUserStatus={changeUserStatus}/>\r\n            <ProfileNavigation userId={isOwner ? profile?.userId : paramsUserId}/>\r\n            <div className={styles.profileNavPanel}>\r\n                <Route path={`${PATH.PROFILE}/${paramsUserId}${PATH.ABOUT}`} render={() => <About\r\n                    error={error}\r\n                    setUserProfileEditMode={setUserProfileEditMode}\r\n                    profileEditMode={profileEditMode}\r\n                    isOwner={isOwner}\r\n                    changeUserProfile={changeUserProfile}\r\n                    profile={profile}/>}/>\r\n                <Route path={`${PATH.PROFILE}/${paramsUserId}${PATH.FRIENDS}`} render={() => <MyFriends/>}/>\r\n                <Route path={`${PATH.PROFILE}/${paramsUserId}${PATH.POSTS}`} render={() => <MyPostsContainer/>}/>\r\n            </div>\r\n        </div>\r\n    )\r\n});","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreType} from \"../../redux-state/redux-store\";\r\nimport {\r\n    changeUserPhoto, changeUserProfile,\r\n    changeUserStatus,\r\n    ProfileType,\r\n    requestUserProfile,\r\n    requestUserStatus, setUserProfileEditMode\r\n} from \"../../redux-state/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {compose} from \"redux\";\r\nimport {Profile} from \"./Profile\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    id: number | null\r\n    isAuth: boolean\r\n    error: string\r\n    profileEditMode: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    requestUserProfile: (userId: number) => void\r\n    requestUserStatus: (userId: number) => void\r\n    changeUserStatus: (status: string) => void\r\n    changeUserPhoto: (photos: File) => void\r\n    changeUserProfile: (profile: ProfileType) => void\r\n    setUserProfileEditMode: (editMode: boolean) => void\r\n}\r\n\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\n\r\nclass ProfileContainer extends React.PureComponent<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.id\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        if (typeof userId === \"number\") {\r\n            this.props.requestUserProfile(userId)\r\n        }\r\n        if (typeof userId === \"number\") {\r\n            this.props.requestUserStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile profile={this.props.profile}\r\n                     isOwner={!this.props.match.params.userId || Number(this.props.match.params.userId) === this.props.id}\r\n                     paramsUserId={Number(this.props.match.params.userId)}\r\n                     status={this.props.status}\r\n                     error={this.props.error}\r\n                     profileEditMode={this.props.profileEditMode}\r\n                     setUserProfileEditMode={this.props.setUserProfileEditMode}\r\n                     changeUserPhoto={this.props.changeUserPhoto}\r\n                     changeUserProfile={this.props.changeUserProfile}\r\n                     changeUserStatus={this.props.changeUserStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: StoreType): MapStatePropsType => {\r\n    const {profile, status, profileEditMode} = state.profilePage;\r\n    const {id, isAuth, error} = state.auth;\r\n    return {profile, status, id, isAuth, error, profileEditMode};\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {requestUserProfile, requestUserStatus,\r\n        changeUserStatus, changeUserPhoto, changeUserProfile, setUserProfileEditMode}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)"],"sourceRoot":""}