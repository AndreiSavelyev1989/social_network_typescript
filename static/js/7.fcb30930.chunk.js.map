{"version":3,"sources":["components/common/universal-input/UniversalInput.tsx","components/common/universal-input/UniversalInput.module.scss","components/login/Login.module.scss","components/login/login-form/LoginForm.module.scss","components/common/universal-checkbox/UniversalCheckbox.module.scss","components/common/universal-checkbox/UniversalCheckbox.tsx","components/login/login-form/LoginForm.tsx","components/login/Login.tsx","components/login/LoginContainer.tsx"],"names":["UniversalInput","id","type","placeholder","formikFieldProps","className","value","onChange","autoFocus","onBlur","onKeyUp","styles","loginInput","formInput","statusInput","required","module","exports","UniversalCheckbox","title","wrapper","box","name","htmlFor","LoginForm","React","memo","dispatch","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","loginTC","style","formBlock","handleSubmit","descriptionBlock","emailTitle","getFieldProps","touched","error","passwordBlock","passwordTitle","forgotPasswordTitle","confirmBlock","button","UniversalButton","Login","isAuth","to","loginContainer","loginBlock","animationContainer","circleSmall","circleMedium","circleLarge","circleXLarge","circleXXLarge","LoginContainer","useDispatch","useSelector","state","auth"],"mappings":"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","file":"static/js/7.fcb30930.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport styles from \"./UniversalInput.module.scss\";\r\n\r\ntype PropsType = {\r\n    id?: string\r\n    type: string\r\n    placeholder?: string\r\n    formikFieldProps?: any\r\n    className?: \"login\" | \"status\"\r\n    value?: undefined | string\r\n    onChange?: (e: ChangeEvent<HTMLInputElement>) => void\r\n    autoFocus?: boolean\r\n    onBlur?: () => void\r\n    onKeyUp?: (e: KeyboardEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const UniversalInput: React.FC<PropsType> = ({\r\n                                                        id,\r\n                                                        type,\r\n                                                        placeholder,\r\n                                                        formikFieldProps,\r\n                                                        className,\r\n                                                        value,\r\n                                                        onChange,\r\n                                                        autoFocus,\r\n                                                        onBlur,\r\n                                                        onKeyUp\r\n                                                    }) => {\r\n    return (\r\n            <input\r\n                id={id}\r\n                className={className === \"login\" ? styles.loginInput : styles.formInput\r\n                    ? className === \"status\" ? styles.statusInput : styles.formInput : styles.formInput}\r\n                type={type}\r\n                placeholder={placeholder}\r\n                required\r\n                autoFocus={autoFocus}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                onKeyUp={onKeyUp}\r\n                value={value}\r\n                {...formikFieldProps}\r\n            />\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInput\":\"UniversalInput_formInput__3Hjo-\",\"loginInput\":\"UniversalInput_loginInput__3G6O5\",\"statusInput\":\"UniversalInput_statusInput__1B1FK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__2Xxnc\",\"loginBlock\":\"Login_loginBlock__2Euxr\",\"animationContainer\":\"Login_animationContainer__GzK8u\",\"circleSmall\":\"Login_circleSmall__31KwY\",\"circle-small\":\"Login_circle-small__24znw\",\"circle-small_1000\":\"Login_circle-small_1000__yh5v-\",\"circle-small_700\":\"Login_circle-small_700__2y90g\",\"circle-small_400\":\"Login_circle-small_400__1m_3X\",\"circleMedium\":\"Login_circleMedium__16QYg\",\"circle-medium\":\"Login_circle-medium__1lZx3\",\"circle-medium_1000\":\"Login_circle-medium_1000__ksgpv\",\"circle-medium_700\":\"Login_circle-medium_700__ypICb\",\"circle-medium_400\":\"Login_circle-medium_400__3QrF9\",\"circleLarge\":\"Login_circleLarge__13K9B\",\"circle-large\":\"Login_circle-large__397LI\",\"circle-large_1000\":\"Login_circle-large_1000__140iq\",\"circle-large_700\":\"Login_circle-large_700__1x3L4\",\"circle-large_400\":\"Login_circle-large_400__3vUAg\",\"circleXLarge\":\"Login_circleXLarge__d5Y9j\",\"circle-xlarge\":\"Login_circle-xlarge__ba-2V\",\"circle-xlarge_1000\":\"Login_circle-xlarge_1000__20H-2\",\"circle-xlarge_700\":\"Login_circle-xlarge_700__1Pt7g\",\"circle-xlarge_400\":\"Login_circle-xlarge_400__JOjP3\",\"circleXXLarge\":\"Login_circleXXLarge__2-RTw\",\"circle-xxlarge\":\"Login_circle-xxlarge__3a9lz\",\"circle-xxlarge_1000\":\"Login_circle-xxlarge_1000__1a8uz\",\"circle-xxlarge_700\":\"Login_circle-xxlarge_700__2munO\",\"circle-xxlarge_400\":\"Login_circle-xxlarge_400__JaSdU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBlock\":\"LoginForm_formBlock__KoHsB\",\"descriptionBlock\":\"LoginForm_descriptionBlock__2PRGI\",\"emailTitle\":\"LoginForm_emailTitle__2Cooh\",\"passwordBlock\":\"LoginForm_passwordBlock__2ZHX3\",\"passwordTitle\":\"LoginForm_passwordTitle__28ORM\",\"forgotPasswordTitle\":\"LoginForm_forgotPasswordTitle__3RgEO\",\"confirmBlock\":\"LoginForm_confirmBlock__w8IIC\",\"button\":\"LoginForm_button__2idV7\",\"error\":\"LoginForm_error__31l6z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UniversalCheckbox_wrapper__Tnk-E\",\"box\":\"UniversalCheckbox_box__cgjSY\",\"anim\":\"UniversalCheckbox_anim__3rSnT\"};","import React from \"react\";\r\nimport styles from \"./UniversalCheckbox.module.scss\"\r\n\r\ntype PropsType = {\r\n    title: string\r\n}\r\n\r\nexport const UniversalCheckbox: React.FC<PropsType>= ({title}) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.box}>\r\n                <input type=\"checkbox\" id=\"checkbox\" name=\"checkbox\"/>\r\n                <label htmlFor=\"checkbox\">\r\n                    <div><i className=\"fas fa-check\"> </i></div>\r\n                    {title}</label>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import style from \"./LoginForm.module.scss\";\r\nimport React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {Dispatch} from \"redux\";\r\nimport {loginTC} from \"../../../redux-state/auth-reducer\";\r\nimport {UniversalInput} from \"../../common/universal-input/UniversalInput\";\r\nimport {UniversalCheckbox} from \"../../common/universal-checkbox/UniversalCheckbox\";\r\nimport {UniversalButton} from \"../../common/universal-button/UniversalButton\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    dispatch: Dispatch<any>\r\n}\r\n\r\nexport const LoginForm: React.FC<PropsType> = React.memo(({dispatch}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length > 15) {\r\n                errors.password = 'Password must be 15 characters or less';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Password must be 8 characters or more ';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values.email, values.password, values.rememberMe))\r\n        },\r\n    })\r\n    return (\r\n        <form className={style.formBlock} onSubmit={formik.handleSubmit}>\r\n            <div className={style.descriptionBlock}>\r\n                <p>Enter your email address and password to access admin panel.</p>\r\n            </div>\r\n            <label htmlFor={\"inputEmail\"} className={style.emailTitle}>\r\n                Email address\r\n            </label>\r\n            <UniversalInput\r\n                id={\"inputEmail\"}\r\n                type={\"text\"}\r\n                placeholder={\"Email\"}\r\n                className={\"login\"}\r\n                formikFieldProps={formik.getFieldProps(\"email\")}/>\r\n            {formik.touched.email && formik.errors.email ?\r\n                <div className={style.error}>{formik.errors.email}</div> : null}\r\n            <div className={style.passwordBlock}>\r\n                <label htmlFor={\"inputPassword\"} className={style.passwordTitle}>\r\n                    Password\r\n                </label>\r\n                <div className={style.forgotPasswordTitle}>\r\n                    Forgot password?\r\n                </div>\r\n            </div>\r\n\r\n            <UniversalInput\r\n                id={\"inputPassword\"}\r\n                type={\"password\"}\r\n                placeholder={\"Password\"}\r\n                className={\"login\"}\r\n                formikFieldProps={formik.getFieldProps(\"password\")}/>\r\n            {formik.touched.password && formik.errors.password ?\r\n                <div className={style.error}>{formik.errors.password}</div> : null}\r\n\r\n            <div className={style.confirmBlock}>\r\n                <UniversalCheckbox title={\"Remember me\"}/>\r\n                <div className={style.button}>\r\n                    <UniversalButton title={\"Log in\"}/>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n})","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"./Login.module.scss\"\r\nimport {LoginForm} from \"./login-form/LoginForm\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype PropsType = {\r\n    dispatch: Dispatch<any>\r\n    isAuth: boolean\r\n}\r\nexport const Login: React.FC<PropsType> = React.memo(({dispatch, isAuth}) => {\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    return (\r\n        <>\r\n            <div className={style.loginContainer}>\r\n                <div className={style.loginBlock}>\r\n                    <h1 className={style.title}>Log in </h1>\r\n                    <LoginForm dispatch={dispatch}/>\r\n                </div>\r\n                <div className={style.animationContainer}>\r\n                    <div className={style.circleSmall}></div>\r\n                    <div className={style.circleMedium}></div>\r\n                    <div className={style.circleLarge}></div>\r\n                    <div className={style.circleXLarge}></div>\r\n                    <div className={style.circleXXLarge}></div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n})","import {Login} from \"./Login\";\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {StoreType} from \"../../redux-state/redux-store\";\r\nimport {AuthUserType} from \"../../redux-state/auth-reducer\";\r\n\r\nconst LoginContainer = React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const {isAuth} = useSelector<StoreType, AuthUserType>(state => state.auth);\r\n\r\n    return (\r\n        <Login dispatch={dispatch} isAuth={isAuth}/>\r\n    )\r\n})\r\n\r\nexport default LoginContainer;"],"sourceRoot":""}